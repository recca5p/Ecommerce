name: Build and deploy Backend to EC2
run-name: "#${{ github.run_number }} - ${{ github.ref_name }} - ${{ github.sha }} - Backend"

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.x
  WORKING_DIRECTORY: Ecommerce.API

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
        
      - name: Restore
        run: dotnet restore "./${{ env.WORKING_DIRECTORY }}/Ecommerce.sln"
        
      - name: Build
        run: dotnet build "./${{ env.WORKING_DIRECTORY }}/Ecommerce.sln" --configuration ${{ env.CONFIGURATION }} --no-restore
        
      - name: Test
        run: dotnet test "./${{ env.WORKING_DIRECTORY }}/Ecommerce.sln" --no-build

      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef
        
      - name: Inject choose config appsetting
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.json"
        env:
          ASPNETCORE_ENVIRONMENT: Development

      - name: Run database migrations
        run: dotnet ef database update --project "./Infrastructure/Persistence/Persistence.csproj"
        env:
          DOTNET_ENVIRONMENT: Production
          DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}

      - name: Inject DB secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.Development.json"
        env:
          AppSettings.DatabaseConnectionString: ${{ secrets.DATABASE_CONNECTION_STRING }}
          
      - name: Inject SecretKey secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.Development.json"
        env:
          AppSettings.PasetoSettings.SecretKey: ${{ secrets.SECRETKEY }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Extract metadata (tags, version) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ecommerce
          tags: |
            type=raw,value=${{ github.sha }}
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps: 
      - name: Decode EC2 Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > ~/.ssh/ec2-key.pem
          ls -l ~/.ssh  # List files to ensure the key is created
          
      - name: Set permissions for EC2 key
        run: |
          chmod 600 ~/.ssh/ec2-key.pem
          ls -l ~/.ssh  # Verify permissions
  
      - name: Deploy to EC2
        env:
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY_PATH: ~/.ssh/ec2-key.pem
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/ecommerce:${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $EC2_KEY_PATH $EC2_USER@$EC2_HOST <<EOF
            # Stop and remove any existing container named "ecommerce"
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^ecommerce$'; then
              sudo docker stop ecommerce --force
              sudo docker rm ecommerce --force
            fi
        
            # Free port 3000 if still in use
            existing_process=\$(sudo lsof -t -i:3000)
            if [ ! -z "\$existing_process" ]; then
              sudo kill -9 \$existing_process --force
            fi
        
            # Remove old images related to "ecommerce"
            old_images=\$(sudo docker images -q "***/ecommerce")
            if [ ! -z "\$old_images" ]; then
              sudo docker rmi -f \$old_images
            fi
        
            # Pull the latest Docker image
            sudo docker pull $DOCKER_IMAGE
        
            # Run the new container
            sudo docker run -dp 3000:8080 \
              --name ecommerce \
              --mount type=volume,source=letsencrypt,target=/etc/letsencrypt \
              $DOCKER_IMAGE
          EOF
